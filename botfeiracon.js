const { Client, LocalAuth, MessageMedia, Chat, Buttons } = require('whatsapp-web.js');
const fs = require('fs');
const express = require('express');
const { body, validationResult } = require('express-validator');
const socketIO = require('socket.io');
const qrcode = require('qrcode');
const http = require('http');
const fileUpload = require('express-fileupload');
const axios = require('axios');
const mime = require('mime-types');
const port = process.env.PORT || 8005;
const app = express();
const server = http.createServer(app);
const io = socketIO(server);

function delay(t, v) {
  return new Promise(function(resolve) { 
      setTimeout(resolve.bind(null, v), t)
  });
}

app.use(express.json());
app.use(express.urlencoded({
extended: true
}));
app.use(fileUpload({
debug: true
}));
app.use("/", express.static(__dirname + "/"))

app.get('/', (req, res) => {
  res.sendFile('index.html', {
    root: __dirname
  });
});

const client = new Client({
  authStrategy: new LocalAuth({ clientId: 'bot-zdg' }),
  puppeteer: { headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--single-process', // <- this one doesn't works in Windows
      '--disable-gpu'
    ] }
});

client.initialize();

io.on('connection', function(socket) {
  socket.emit('message', '¬© BOT-POLITEIA - Iniciado');
  socket.emit('qr', './icon.svg');

client.on('qr', (qr) => {
    console.log('QR RECEIVED', qr);
    qrcode.toDataURL(qr, (err, url) => {
      socket.emit('qr', url);
      socket.emit('message', '¬© BOT-POLITEIA QRCode recebido, aponte a c√¢mera  seu celular!');
    });
});

client.on('ready', () => {
    socket.emit('ready', '¬© BOT-POLITEIA Dispositivo pronto!');
    socket.emit('message', '¬© BOT-POLITEIA Dispositivo pronto!');
    socket.emit('qr', './check.svg')	
    console.log('¬© BOT-POLITEIA Dispositivo pronto');
});

client.on('authenticated', () => {
    socket.emit('authenticated', '¬© BOT-POLITEIA Autenticado!');
    socket.emit('message', '¬© BOT-POLITEIA Autenticado!');
    console.log('¬© BOT-POLITEIA Autenticado');
});

client.on('auth_failure', function() {
    socket.emit('message', '¬© BOT-POLITEIA Falha na autentica√ß√£o, reiniciando...');
    console.error('¬© BOT-POLITEIA Falha na autentica√ß√£o');
});

client.on('change_state', state => {
  console.log('¬© BOT-POLITEIA Status de conex√£o: ', state );
});

client.on('disconnected', (reason) => {
  socket.emit('message', '¬© BOT-POLITEIA Cliente desconectado!');
  console.log('¬© BOT-POLITEIA Cliente desconectado', reason);
  client.initialize();
});
});

// Send message
app.post('/politeia-message', [
  body('number').notEmpty(),
  body('message').notEmpty(),
], async (req, res) => {
  const errors = validationResult(req).formatWith(({
    msg
  }) => {
    return msg;
  });

  if (!errors.isEmpty()) {
    return res.status(422).json({
      status: false,
      message: errors.mapped()
    });
  }

  const number = req.body.number;
  const numberDDI = number.substr(0, 2);
  const numberDDD = number.substr(2, 2);
  const numberUser = number.substr(-8, 8);
  const message = req.body.message;

  if (numberDDI !== "55") {
    const numberZDG = number + "@c.us";
    client.sendMessage(numberZDG, message).then(response => {
    res.status(200).json({
      status: true,
      message: 'BOT-POLITEIA Mensagem enviada',
      response: response
    });
    }).catch(err => {
    res.status(500).json({
      status: false,
      message: 'BOT-POLITEIA Mensagem n√£o enviada',
      response: err.text
    });
    });
  }
  else if (numberDDI === "55" && parseInt(numberDDD) <= 30) {
    const numberZDG = "55" + numberDDD + "9" + numberUser + "@c.us";
    client.sendMessage(numberZDG, message).then(response => {
    res.status(200).json({
      status: true,
      message: 'BOT-POLITEIA Mensagem enviada',
      response: response
    });
    }).catch(err => {
    res.status(500).json({
      status: false,
      message: 'BOT-POLITEIA Mensagem n√£o enviada',
      response: err.text
    });
    });
  }
  else if (numberDDI === "55" && parseInt(numberDDD) > 30) {
    const numberZDG = "55" + numberDDD + numberUser + "@c.us";
    client.sendMessage(numberZDG, message).then(response => {
    res.status(200).json({
      status: true,
      message: 'BOT-POLITEIA Mensagem enviada',
      response: response
    });
    }).catch(err => {
    res.status(500).json({
      status: false,
      message: 'BOT-POLITEIA Mensagem n√£o enviada',
      response: err.text
    });
    });
  }
});


// Send media
app.post('/politeia-media', [
  body('number').notEmpty(),
  body('file').notEmpty(),
], async (req, res) => {
  const errors = validationResult(req).formatWith(({
    msg
  }) => {
    return msg;
  });

  if (!errors.isEmpty()) {
    return res.status(422).json({
      status: false,
      message: errors.mapped()
    });
  }

  const number = req.body.number;
  const numberDDI = number.substr(0, 2);
  const numberDDD = number.substr(2, 2);
  const numberUser = number.substr(-8, 8);
  const fileUrl = req.body.file;

  let mimetype;
  const attachment = await axios.get(fileUrl, {
    responseType: 'arraybuffer'
  }).then(response => {
    mimetype = response.headers['content-type'];
    return response.data.toString('base64');
  });

  const media = new MessageMedia(mimetype, attachment, 'Media');

  if (numberDDI !== "55") {
    const numberZDG = number + "@c.us";
    client.sendMessage(numberZDG, media).then(response => {
    res.status(200).json({
      status: true,
      message: 'BOT-POLITEIA Imagem enviada',
      response: response
    });
    }).catch(err => {
    res.status(500).json({
      status: false,
      message: 'BOT-POLITEIA Imagem n√£o enviada',
      response: err.text
    });
    });
  }
  else if (numberDDI === "55" && parseInt(numberDDD) <= 30) {
    const numberZDG = "55" + numberDDD + "9" + numberUser + "@c.us";
    client.sendMessage(numberZDG, media).then(response => {
    res.status(200).json({
      status: true,
      message: 'BOT-POLITEIA Imagem enviada',
      response: response
    });
    }).catch(err => {
    res.status(500).json({
      status: false,
      message: 'BOT-POLITEIA Imagem n√£o enviada',
      response: err.text
    });
    });
  }
  else if (numberDDI === "55" && parseInt(numberDDD) > 30) {
    const numberZDG = "55" + numberDDD + numberUser + "@c.us";
    client.sendMessage(numberZDG, media).then(response => {
    res.status(200).json({
      status: true,
      message: 'BOT-POLITEIA Imagem enviada',
      response: response
    });
    }).catch(err => {
    res.status(500).json({
      status: false,
      message: 'BOT-POLITEIA Imagem n√£o enviada',
      response: err.text
    });
    });
  }
});

client.on('message', async msg => {

  const nomeContato = msg._data.notifyName;
  let groupChat = await msg.getChat();
  
  if (groupChat.isGroup) return null;

  if (msg.type.toLowerCase() == "e2e_notification") return null;
  
  if (msg.body == "") return null;
	
  if (msg.from.includes("@g.us")) return null;

  if (msg.body !== null && msg.body === "1") {
 delay(2000).then(async function() {

const stickers = MessageMedia.fromFilePath('./images/sticker.png');
client.sendMessage(stickers, { sendMediaAsSticker: true })

});
	msg.reply("Clique no link abaixo e efetue sua inscri√ß√£o!");

	delay(2000).then(async function() {
	const media = MessageMedia.fromFilePath('./images/cardinsc');
	client.sendMessage(msg.from, media, {caption: 'link'})
		});

 	}
	
   else if (msg.body !== null && msg.body === "2") {

delay(2000).then(async function() {

const stickers = MessageMedia.fromFilePath('./images/cardexpo');
client.sendMessage(stickers, { sendMediaAsSticker: true })

});
	msg.reply("Clique no link abaixo e efetue sua inscri√ß√£o!");

	delay(2000).then(async function() {
	const media = MessageMedia.fromFilePath('./images/card');
	client.sendMessage(msg.from, media, {caption: 'link'})
		});

 	}
	  
 else if (msg.body !== null && msg.body === "3") {

	msg.reply("Fale agora mesmo com uma de nossas atendentes:");

delay(4000).then(async function() {

const contactCard = await client.getContactById('556592789898@c.us');
	    client.sendMessage(msg.from, contactCard)
     		});
   	        
 } 
   
  else if (msg.body !== null && msg.body === "12") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
 else if (msg.body !== null && msg.body === "13") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
 else if (msg.body !== null && msg.body === "14") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }

  else if (msg.body !== null && msg.body === "15") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
	  
else if (msg.body !== null && msg.body === "16"){
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
    
  else if (msg.body !== null && msg.body === "17") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
  else if (msg.body !== null && msg.body === "18") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
  else if (msg.body !== null && msg.body === "19") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
  else if (msg.body !== null && msg.body === "20") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
  else if (msg.body !== null && msg.body === "21") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }
  
  else if (msg.body !== null && msg.body === "22") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }

  else if (msg.body !== null && msg.body === "23") {
  msg.reply("Op√ß√£o inv√°lida! üìµ\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }

  else if (msg.body === '!mediainfo' && msg.hasMedia) {
  msg.reply("Desculpe, n√£o entendo mensagens de voz por enquanto üòî\nEscolha um n√∫mero do menu principal por favor, ou digite *9* para falar com um atendente."); 
  }

 else if (msg.body !== null && msg.body === "N") {
   const chat = await msg.getChat();
   msg.reply("Ok, n√£o vamos mais te enviar mensagens por este atendimento virtual. Desculpe üòî"); 
  
        // mute the chat for 60 seconds
        //async muteChat(chatId, unmuteDate) {
  }

 else if (msg.body !== null && msg.body === "n") {
  msg.reply("Ok, n√£o vamos mais te enviar mensagens por este atendimento virtual. Desculpe üòî"); 
  }

   else if (msg.body !== null || msg.body === "0" || msg.type === 'ptt') {

   	delay(12000).then(async function() {

 	msg.reply("Ol√° *" + nomeContato + "*, voc√™ est√° agora conversando com o que h√° de mais moderno em atendimento digital para WhatsApp.\nPor aqui suas d√∫vidas ser√£o todas respondidas, mas caso n√£o seja suficiente, pode falar diretamente com algu√©m.\nO contato segue no final da conversa üòâ");
	
	const saudacao = ("ü§ñ A *robotiza√ß√£o* veio pra ficar, √© ineg√°vel!\n\n‚úÖ E voc√™ n√£o precisa estar *dispon√≠vel o tempo todo* para seus clientes, mas sua empresa sim!\n\nüë©üèΩ‚Äçüíª Instale uma *secret√°ria virtual* e nunca mais deixe algu√©m esperando para ser atendido!\n\nü™ô Com *pouco investimento* voc√™ pode oferecer atendimento profissional *24 horas*, o ano todo!\n\nüéØ Direcione o contato dos seus *an√∫ncios patrocinados* para o rob√¥ tamb√©m e aumente sua carteira de clientes!\n\n*Quer saber mais?* Vou te mostrar como funciona ‚¨áÔ∏è");
	
	const saudacao1 = ("Este √© o nosso atendimento digital, voc√™ pode resolver suas d√∫vidas e ter um exemplo do que pode oferecer aos seus clientes.\n\nPara come√ßar digite o n√∫mero de uma das op√ß√µes abaixo:");
	
	client.sendMessage(msg.from, saudacao);	
	client.sendMessage(msg.from, saudacao1);

		});
      
	delay(23000).then(async function() {

const saudacao2 = ("1Ô∏è‚É£ Quero saber como funciona esse rob√¥ de WhatsApp \r\n\r\n2Ô∏è‚É£ Quais equipamentos preciso ter para iniciar este servi√ßo?\r\n\r\n3Ô∏è‚É£ Voc√™s fazem disparos de WhatsApp? \r\n\r\n4Ô∏è‚É£ Funciona no Brasil todo?\r\n\r\n5Ô∏è‚É£ Consigo enviar anexos como fotos, textos, √°udios e v√≠deos?\r\n\r\n6Ô∏è‚É£ Preciso estar com meu celular conectado para que funcione? \r\n\r\n7Ô∏è‚É£ Preciso de um n√∫mero exclusivo para o atendimento? \r\n\r\n8Ô∏è‚É£ Quanto custa este servi√ßo?\r\n\r\n9Ô∏è‚É£ Minha d√∫vida n√£o est√° aqui, quero falar com algu√©m da Politeia\r\n\r\nPara mais detalhes, visite nosso site:\nhttps://www.politeiaid.com.br/\r\n\r\nCaso n√£o queira mais receber mensagens deste atendimento virtual, por favor digite *N*");

	client.sendMessage(msg.from, saudacao2);
		});
	}
});

console.log("\nA Politeia desenvolve este e outros sistemas que usam intelig√™ncia artificial para facilitar sua interatividade com clientes e fornecedores de maneira simples e eficiente.")
console.log("\nQuer um atendimento como este? Mande uma mensagem agora mesmo para nossa equipe clicando no m√∫mero a seguir: *11977750211*")
    
server.listen(port, function() {
        console.log('Aplica√ß√£o rodando na porta *: ' + port + ' . Acesse no link: http://localhost:' + port);
});
